#/ Loading libraries
library(plyr)
library(dplyr)
library(tibble)
library(tidyverse)
library(e1071)
library(janitor)
library(caret)

#/ Setting working directory
setwd("")

#/ Loading data
# 1. DEG Data
Train1.DEG= readRDS("train1.tab.rds")

# 2. Quantile + Batch corrected data
Train1.bc= as.data.frame(t(readRDS("train1.batch-corrected.rds")))
Train1.bc = Train1.bc %>% relocate(GSE_ID, Source, Batch)
labels.Train1= as.factor(Train1.bc[,c(2)])

test1.bc= as.data.frame(t(readRDS("test1.batch-corrected.rds")))
test1.bc = test1.bc %>% relocate(GSE_ID, Source, Batch)
labels.test1= as.factor(test1.bc[,c(2)])

# Select the DEGs of interest w.r.t to the adj.P.value
abc= Train1.DEG[order(Train1.DEG$adj.P.Val, decreasing = F),]
top5DEG= abc[1:400,]

# Subset Training and testing data from all DEG

Train1.top400= Train1.bc[,rownames((top400DEG))]
Train1.top400.mat= as.matrix(Train1.top400)
class(Train1.top400.mat)="numeric"

test1.top400= test1.bc[,rownames((top400DEG))]
test1.top400.mat= as.matrix(test1.top400)
class(test1.top400.mat)="numeric"

############################### SVM model ####################################

model.Train1= best.svm(Train1.top400.mat, labels.Train1, cost = c(0.1, 1, 10), kernel = "radial",
                       tunecontrol = tune.control(cross = 10), probability= T, type= "C-classification")

sink("top400.SVM.Train1.txt")

#/ Testing the model on Train set
p.Train1 = predict(model.Train1, Train1.top400.mat) 

#/ Confusion Matrix for Train set
Train1.cm=confusionMatrix(p.Train1, labels.Train1)
Train1.cm

#/ Testing the model on test set
p.test1 = predict(model.Train1, test1.top400.mat)

#/ Confusion matrix for test set
test1.cm=confusionMatrix(p.test1, labels.test1)
test1.cm

sink()

#Save model and predictions

saveRDS(model.Train1, "top400.SVM.Train1.rds")

write.table(p.test1, "top400.SVM.test1.Pred.txt", sep="\t")

#/ Saving probability values

pred1 = predict(model.Train1, test1.top400.mat, probability = TRUE)
ev_prob1 = attr(pred1, "probabilities")

#/ Save probablities

write.table(ev_prob1, "SVM.top400.ev.prob1.txt", sep="\t")

################################# PAM model ##################################

#/ Processing the training data for model building
#> While creating the train list, it is better to transpose (train)data only after data partition step; 
#> otherwise it yields errors while creating the model using pamr.train function.
a= t(train1.top400.mat)

train1.data = list(x= a, y= labels.train1, 
                  geneid= as.character(1:nrow(a)), genenames= rownames(a))

#/ Building model with the training dataset

pam.model = pamr.train(train1.data)
pam.model

saveRDS(pam.model, "PAM.top400.train1.rds")

# Cross validation
set.seed(123)

model.cv= pamr.cv(pam.model, train1.data, nfold = 10)
model.cv

#> You get a table with 3 columns and 30 rows. The rows correspond to threshold values (first column). For
#> each threshold you see the number of surviving genes (second column) and the number of mis-classifications
#> on the training set (third column).

# Plot the cross-validation error rate vs. delta values
pamr.plotcv(model.cv)

# Determine the delta value

Delta = 0.000
Delta

saveRDS(Delta, "D1.rds")

# Confusion matrix

sink("PAM.top400.train1.txt")

train1.cm=pamr.confusion(model.cv, Delta, extra = F)

confusionMatrix(train1.cm)

#/ Prediction using test data
b= t(test1.top400.mat)

p.test1 = pamr.predict(pam.model, b, Delta)

test1.top400.table=table(true = labels.test1, pred = p.test1)

confusionMatrix(test1.top400.table)

MCC.top400.test1=mcc(TN=test1.top400.table[1,1],
                     FP=test1.top400.table[1,2],
                     TP=test1.top400.table[2,2],
                     FN=test1.top400.table[2,1])

MCC.top400.test1

sink()

#/ Saving the list of genes that survived

pamr.plotcvprob(pam.model, train1.data, Delta )

pamr.geneplot(pam.model, train1.data, threshold = 5.050)
top400.train1.gene.list = pamr.listgenes(pam.model, train1.data, Delta, model.cv, genenames = TRUE)

write.table(top400.train1.gene.list, "top400.train1.genes.list.txt", sep="\t")

#/ Prediction probabilities using validation test data

ev_prob1 = pamr.predict(pam.model, b, Delta, type = "posterior")

#/ Save test predictions
write.table(p.test1, "PAM.top400.test1.predictions.txt", sep="\t")

write.table(ev_prob1, "PAM.top400.ev.prob1.txt", sep="\t")


# NOTE: Repeat the steps for both the models of SVM and PAM with the other train iterations and the subsetted DEGs as well
